{"version":3,"sources":["AddItemForms.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForms","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","callBack","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","edit","setEdit","onBlur","callback","autoFocus","onDoubleClick","Todolist","newValue","changeTodoTitle","id","removeTodolist","Delete","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","task","changeStatus","td","tl","AppBar","position","Toolbar","edge","aria-label","Typography","Grid","container","style","padding","Container","fixed","todolist","newTodo","addTodoList","spacing","allTodolistTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.29078b41.chunk.js","sourcesContent":["import { Button, IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\n\r\n\r\ntype AddItemFormsTypes = {\r\n  callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForms = (props: AddItemFormsTypes) => {\r\n\r\n  let [title, setTitle] = useState(\"\")\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addTask = () => {\r\n      let newTitle = title.trim();\r\n      if (newTitle !== \"\") {\r\n          props.callBack(newTitle);\r\n          setTitle(\"\");\r\n      } else {\r\n          setError(\"Title is required\");\r\n      }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      setError(null);\r\n      if (e.charCode === 13) {\r\n          addTask();\r\n      }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n            <TextField\r\n                    variant=\"outlined\"\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    error={!!error}\r\n                    label=\"Title\"\r\n                    helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addTask}>\r\n        <AddBox/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\n\r\n\r\n// type AddItemFormsTypes = {\r\n//   addTask: (title: string, todolistId: string) => void\r\n//   id: string\r\n// }\r\n\r\n// export const AddItemForms = (props: AddItemFormsTypes) => {\r\n\r\n//   let [title, setTitle] = useState(\"\")\r\n//   let [error, setError] = useState<string | null>(null)\r\n\r\n//   const addTask = () => {\r\n//       let newTitle = title.trim();\r\n//       if (newTitle !== \"\") {\r\n//           props.addTask(newTitle, props.id);\r\n//           setTitle(\"\");\r\n//       } else {\r\n//           setError(\"Title is required\");\r\n//       }\r\n//   }\r\n\r\n//   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//       setTitle(e.currentTarget.value)\r\n//   }\r\n\r\n//   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//       setError(null);\r\n//       if (e.charCode === 13) {\r\n//           addTask();\r\n//       }\r\n//   }\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//             <input value={title}\r\n//               onChange={onChangeHandler}\r\n//               onKeyPress={onKeyPressHandler}\r\n//               className={error ? \"error\" : \"\"}\r\n//       />\r\n//       <button onClick={addTask}>+</button>\r\n//       {error && <div className=\"error-message\">{error}</div>}\r\n\r\n//     </div>\r\n//   )\r\n// }\r\n","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, useState } from 'react'\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  callback: (newValue: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n  let [edit, setEdit] = useState(false)\r\n  let [title, setTitle] = useState(props.title)\r\n\r\n  const activateMode = () => {\r\n    setEdit(true)\r\n    setTitle(title)\r\n  }\r\n\r\n  const activateViewMode = () => {\r\n    setEdit(false)\r\n    props.callback(title)\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n}\r\n\r\n  return ( edit\r\n      ? <TextField value={title} variant=\"outlined\" onBlur={activateViewMode} onChange={onChangeHandler} autoFocus />\r\n      : <span onDoubleClick={activateMode}>{title}</span>\r\n  )\r\n}\r\n","import { Button, Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport { AddItemForms } from './AddItemForms';\r\nimport {FilterValuesType} from './App';\r\nimport { EditableSpan } from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodoTitle: (id: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const onChangeTitleTodoHandler = (newValue: string) => {\r\n        props.changeTodoTitle(props.id, newValue, props.id);\r\n    }\r\n\r\n\r\n    const callBackHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} callback={onChangeTitleTodoHandler}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <div>\r\n            {/* <AddItemForms addTask={props.addTask} id={props.id}/> */}\r\n            <AddItemForms callBack={callBackHandler}/>\r\n        </div>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color=\"primary\" onChange={onChangeTaskHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callback={onChangeTitleHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button color='default' variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color=\"primary\" variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color=\"secondary\" variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport { AddItemForms } from './AddItemForms';\r\nimport { AppBar, IconButton, Toolbar, Typography, Button, Container, Grid, Paper } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        // tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id != id)})\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        // tasks[todolistId] = [task, ...todolistTasks];\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n\r\n        setTasks({...tasks, [todolistId] : [...tasks[todolistId], task]})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // найдём нужную таску:\r\n        // let task = todolistTasks.find(t => t.id === id);\r\n        // //изменим таску, если она нашлась\r\n        // if (task) {\r\n        //     task.isDone = isDone;\r\n        //     // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        //     setTasks({...tasks});\r\n        // }\r\n\r\n        setTasks({...tasks, [todolistId]:tasks[todolistId].map(td => td.id === id ? {...td, isDone} : td)})\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        // let todolist = todolists.find(tl => tl.id === todolistId);\r\n        // if (todolist) {\r\n        //     todolist.filter = value;\r\n        //     setTodolists([...todolists])\r\n        // }\r\n        setTodolists(todolists.map(td => td.id === todolistId ? {...td, filter: value} : td))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        // setTodolists(todolists.filter(tl => tl.id != id));\r\n        // // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        // delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n        setTodolists([...todolists.filter(tl => tl.id != id)])\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        let todolist = v1()\r\n        let newTodo: TodolistType = {id: todolist, title, filter: \"all\"}\r\n        // setTodolists([newTodo, ...todolists])\r\n        // setTasks({\r\n        //     ...tasks,\r\n        //     [todolist]: []\r\n        // })\r\n        setTodolists([...todolists, newTodo])\r\n        setTasks({...tasks, [todolist]: []})\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // найдём нужную таску:\r\n        // let task = todolistTasks.find(t => t.id === id);\r\n        // //изменим таску, если она нашлась\r\n        // if (task) {\r\n        //     task.title = title;\r\n        //     // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        //     setTasks({...tasks});\r\n        // }\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(t => t.id === id ? {...t, title} : t) })\r\n    }\r\n\r\n    function changeTodoTitle(id: string, title: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // найдём нужную таску:\r\n        // let task = todolistTasks.find(t => t.id === id);\r\n        // //изменим таску, если она нашлась\r\n        // if (task) {\r\n        //     task.title = title;\r\n        //     // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        //     setTasks({...tasks});\r\n        // }\r\n\r\n        setTodolists([...todolists.map(td => td.id === todolistId ? {...td, title} : td)])\r\n    }\r\n\r\n\r\n    const callBackHandler = (title: string) => {\r\n        addTodoList(title)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" >\r\n                    News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                </AppBar>\r\n            {/* <AddItemForms addTask={addTodoList} id={v1()}/> */}\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <Container fixed>\r\n                    <AddItemForms callBack={callBackHandler}/>\r\n                </Container>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                        }\r\n\r\n                        return <Grid item>\r\n                                    <Paper style={{padding: \"10px\"}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoTitle={changeTodoTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}