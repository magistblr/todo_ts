{"version":3,"sources":["serviceWorker.ts","AddItemForms.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForms","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","callBack","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","edit","setEdit","onBlur","callback","autoFocus","onDoubleClick","Todolist","newValue","changeTodoTitle","id","removeTodolist","Delete","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","todolistId1","v1","todolistId2","initialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","todolistId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTodolistFilterAC","changeTaskTitleAC","action","addTodoList","addTodolistAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Typography","Grid","container","style","padding","Container","fixed","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","rootReducer","combineReducers","td","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b6c8da4a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Button, IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\n\r\n\r\ntype AddItemFormsTypes = {\r\n  callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForms = (props: AddItemFormsTypes) => {\r\n\r\n  let [title, setTitle] = useState(\"\")\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addTask = () => {\r\n      let newTitle = title.trim();\r\n      if (newTitle !== \"\") {\r\n          props.callBack(newTitle);\r\n          setTitle(\"\");\r\n      } else {\r\n          setError(\"Title is required\");\r\n      }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      setError(null);\r\n      if (e.charCode === 13) {\r\n          addTask();\r\n      }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n            <TextField\r\n                    variant=\"outlined\"\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    error={!!error}\r\n                    label=\"Title\"\r\n                    helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addTask}>\r\n        <AddBox/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\n\r\n\r\n// type AddItemFormsTypes = {\r\n//   addTask: (title: string, todolistId: string) => void\r\n//   id: string\r\n// }\r\n\r\n// export const AddItemForms = (props: AddItemFormsTypes) => {\r\n\r\n//   let [title, setTitle] = useState(\"\")\r\n//   let [error, setError] = useState<string | null>(null)\r\n\r\n//   const addTask = () => {\r\n//       let newTitle = title.trim();\r\n//       if (newTitle !== \"\") {\r\n//           props.addTask(newTitle, props.id);\r\n//           setTitle(\"\");\r\n//       } else {\r\n//           setError(\"Title is required\");\r\n//       }\r\n//   }\r\n\r\n//   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//       setTitle(e.currentTarget.value)\r\n//   }\r\n\r\n//   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//       setError(null);\r\n//       if (e.charCode === 13) {\r\n//           addTask();\r\n//       }\r\n//   }\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//             <input value={title}\r\n//               onChange={onChangeHandler}\r\n//               onKeyPress={onKeyPressHandler}\r\n//               className={error ? \"error\" : \"\"}\r\n//       />\r\n//       <button onClick={addTask}>+</button>\r\n//       {error && <div className=\"error-message\">{error}</div>}\r\n\r\n//     </div>\r\n//   )\r\n// }\r\n","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, useState } from 'react'\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  callback: (newValue: string) => void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n  let [edit, setEdit] = useState(false)\r\n  let [title, setTitle] = useState(props.title)\r\n\r\n  const activateMode = () => {\r\n    setEdit(true)\r\n    setTitle(title)\r\n  }\r\n\r\n  const activateViewMode = () => {\r\n    setEdit(false)\r\n    props.callback(title)\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n}\r\n\r\n  return ( edit\r\n      ? <TextField value={title} variant=\"outlined\" onBlur={activateViewMode} onChange={onChangeHandler} autoFocus />\r\n      : <span onDoubleClick={activateMode}>{title}</span>\r\n  )\r\n}\r\n","import { Button, Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport { AddItemForms } from './AddItemForms';\r\nimport {FilterValuesType} from './App';\r\nimport { EditableSpan } from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    changeTodoTitle: (id: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const onChangeTitleTodoHandler = (newValue: string) => {\r\n        props.changeTodoTitle(props.id, newValue, props.id);\r\n    }\r\n\r\n\r\n    const callBackHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title} callback={onChangeTitleTodoHandler}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <div>\r\n            {/* <AddItemForms addTask={props.addTask} id={props.id}/> */}\r\n            <AddItemForms callBack={callBackHandler}/>\r\n        </div>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color=\"primary\" onChange={onChangeTaskHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callback={onChangeTitleHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button color='default' variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color=\"primary\" variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color=\"secondary\" variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import { v1 } from \"uuid\";\r\nimport { FilterValuesType, TodolistType } from \"../App\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n  type: 'REMOVE-TODOLIST',\r\n  id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n  type: 'ADD-TODOLIST'\r\n  title: string\r\n  id: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n  type: 'CHANGE-TODOLIST-TITLE'\r\n  id: string\r\n  title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  id: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type ActionTypes =   RemoveTodolistActionType |\r\n                            AddTodolistActionType |\r\n                            ChangeTodolistTitleActionType |\r\n                            ChangeTodolistFilterActionType\r\n\r\n  export const todolistId1 = v1();\r\n  export const todolistId2 = v1();\r\n\r\n  const initialState: Array<TodolistType> = [\r\n      {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n      {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n  ]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionTypes): Array<TodolistType> => {\r\n  switch (action.type) {\r\n      case 'REMOVE-TODOLIST':\r\n          return [...state.filter(tl => tl.id != action.id)]\r\n      case 'ADD-TODOLIST':\r\n          return [...state, {id: action.id, title: action.title, filter: \"all\"}]\r\n      case 'CHANGE-TODOLIST-TITLE':\r\n          return state.map(td => td.id === action.id ? {...td, title: action.title} : td)\r\n      case 'CHANGE-TODOLIST-FILTER':\r\n          return state.map(td => td.id === action.id ? {...td, filter: action.filter} : td)\r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n  return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const addTodolistAC = ( title: string): AddTodolistActionType => {\r\n  return { type: 'ADD-TODOLIST', title,  id: v1()}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n  return { type: 'CHANGE-TODOLIST-TITLE', id: todolistId, title}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n  return { type: 'CHANGE-TODOLIST-FILTER', id: todolistId, filter: filter}\r\n}\r\n","import { v1 } from \"uuid\";\r\nimport { FilterValuesType, TasksStateType } from \"../App\";\r\nimport { AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2 } from \"./todolists-reducer\";\r\n\r\nexport type RemoveTasktActionType = {\r\n  type: 'REMOVE-TASK',\r\n  id: string\r\n  todolistId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n  type: 'ADD-TASK'\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n  type: 'CHANGE-TASK-TITLE'\r\n  id: string\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\nexport type ChangeTasksFilterActionType = {\r\n  type: 'CHANGE-TASK-FILTER'\r\n  id: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n  type: 'CHANGE-TASK-STATUS'\r\n  id: string\r\n  isDone: boolean\r\n  todolistId: string\r\n}\r\n\r\nexport type ActionTypes =   RemoveTasktActionType |\r\n                            AddTaskActionType |\r\n                            ChangeTaskTitleActionType |\r\n                            ChangeTasksFilterActionType |\r\n                            ChangeTaskStatusActionType |\r\n                            AddTodolistActionType |\r\n                            RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n  [todolistId1]: [\r\n      {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n      {id: v1(), title: \"JS\", isDone: true}\r\n  ],\r\n  [todolistId2]: [\r\n      {id: v1(), title: \"Milk\", isDone: true},\r\n      {id: v1(), title: \"React Book\", isDone: true}\r\n  ]\r\n}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\r\n  switch (action.type) {\r\n      case 'REMOVE-TASK':\r\n          return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.id)}\r\n      case 'ADD-TASK':\r\n          return {...state, [action.todolistId]: [...state[action.todolistId], {id: v1(), title: action.title, isDone: false}]}\r\n      case 'CHANGE-TASK-TITLE':\r\n          return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.id ? {...t, title: action.title} : t)}\r\n      case 'CHANGE-TASK-STATUS':\r\n          return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.id ? {...t, isDone: action.isDone} : t)}\r\n      case 'ADD-TODOLIST':\r\n          return {...state, [action.id]:[]}\r\n      case 'REMOVE-TODOLIST': {\r\n          const copyState = {...state }\r\n          delete copyState[action.id]\r\n          return copyState\r\n          }\r\n      default:\r\n          return state\r\n          }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (id: string, todolistId: string): RemoveTasktActionType => {\r\n  return { type: 'REMOVE-TASK', id: id, todolistId: todolistId}\r\n}\r\n\r\nexport const addTaskAC = ( title: string, todolistId: string): AddTaskActionType => {\r\n  return { type: 'ADD-TASK', title, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n  return { type: 'CHANGE-TASK-TITLE', id: id, title, todolistId}\r\n}\r\n\r\nexport const changeTaskFilterAC = (id: string, filter: FilterValuesType): ChangeTasksFilterActionType => {\r\n  return { type: 'CHANGE-TASK-FILTER', id, filter}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n  return { type: 'CHANGE-TASK-STATUS', id, isDone, todolistId}\r\n}\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport { AddItemForms } from './AddItemForms';\r\nimport { AppBar, IconButton, Toolbar, Typography, Button, Container, Grid, Paper } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC, todolistsReducer } from './state/todolists-reducer';\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>( state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks)\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        dispatch(changeTaskTitleAC(id, title, todolistId))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n        dispatch(action)\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    function changeTodoTitle(id: string, title: string) {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }\r\n\r\n    const callBackHandler = (title: string) => {\r\n        addTodoList(title)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" >\r\n                    News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                </AppBar>\r\n            {/* <AddItemForms addTask={addTodoList} id={v1()}/> */}\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <Container fixed>\r\n                    <AddItemForms callBack={callBackHandler}/>\r\n                </Container>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                        }\r\n\r\n                        return <Grid item>\r\n                                    <Paper style={{padding: \"10px\"}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodolist={removeTodolist}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoTitle={changeTodoTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import { todolistsReducer } from './todolists-reducer';\r\nimport { combineReducers, createStore } from \"redux\";\r\nimport { tasksReducer } from './tasks-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer,\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppWithRedux />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}