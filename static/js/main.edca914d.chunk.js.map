{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/authReducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","body","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","todolists","isLoggedIn","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","App","AppBar","position","Toolbar","s","toolbar","edge","aria-label","Menu","online","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.edca914d.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b272fdcf-142a-4a7e-8222-fde46b2c383b'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(body: AuthType) {\r\n        return instance.post<AuthType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', body);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{item: MeAuthType}>>('/auth/me');\r\n    }\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type AuthType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\n\r\nexport type MeAuthType = {\r\n    id: number\r\n    email: string\r\n    login: boolean\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetIsInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport { Redirect } from 'react-router';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const {tasks, todolists} = useSelector<AppRootStateType, AppRootStateType>(state => state)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { authAPI, AuthType } from '../../api/todolists-api'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setIsInitializedAC } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'login/SET-IS-LOGGED-IN':\r\n           return {...state, isLoggedIn: action.value}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n   ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const loginTC = (data: AuthType) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n      .then(res => {\r\n          if (res.data.resultCode === 0) {\r\n              dispatch(setIsLoggedInAC(true))\r\n              dispatch(setAppStatusAC('succeeded'))\r\n          } else {\r\n              handleServerAppError(res.data, dispatch);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          handleServerNetworkError(error, dispatch)\r\n      })\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n      dispatch(setIsInitializedAC(true))\r\n    if (res.data.resultCode === 0) {\r\n          dispatch(setIsLoggedInAC(true));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n  })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout()\r\n      .then(res => {\r\n          if (res.data.resultCode === 0) {\r\n              dispatch(setIsLoggedInAC(false))\r\n              dispatch(setAppStatusAC('succeeded'))\r\n          } else {\r\n              handleServerAppError(res.data, dispatch)\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          handleServerNetworkError(error, dispatch)\r\n      })\r\n}\r\n\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import React, { useEffect, useState } from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from '../TodolistsList/authReducer';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { Redirect } from 'react-router';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n }\r\n\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 2) {\r\n                errors.password = 'Must be 2 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n   return <Grid container justifyContent={'center'}>\r\n       <Grid item justifyContent={'center'}>\r\n           <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                            target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}/>\r\n                            {\r\n                                formik.touched.email &&\r\n                                formik.errors.email\r\n                                        ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                                        : null\r\n                            }\r\n                    <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}/>\r\n                            {\r\n                                formik.touched.password &&\r\n                                formik.errors.password\r\n                                        ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                                        : null\r\n                            }\r\n                    <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}/>\r\n                    <Button\r\n                        type={'submit'}\r\n                        variant={'contained'}\r\n                        color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n           </form>\r\n       </Grid>\r\n   </Grid>\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport s from './App.module.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { RequestStatusType } from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { Redirect, Route } from 'react-router'\r\nimport { Switch } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { initializeAppTC, logoutTC } from '../features/TodolistsList/authReducer'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    console.log(demo);\r\n    \r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const onLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar className={s.toolbar}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {isLoggedIn && <Button className={s.online} color=\"inherit\">Online</Button>}\r\n                    {isLoggedIn && <Button onClick={onLogout} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={()=> <TodolistsList demo={demo}/>} />\r\n                    <Route path={'/login'} render={()=> <Login/>} />\r\n                    <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    <Redirect from={ '*' } to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/TodolistsList/authReducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"App_toolbar__3YqLh\",\"online\":\"App_online__1Y3-a\"};"],"sourceRoot":""}